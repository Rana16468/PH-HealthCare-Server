// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(true)
  status  UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin Admin? // one to one relation ships to User Table
  doctor Doctor?  // one to one relation ships to Doctor Table
  patient Patient? // onet to one  relation ships to Patient table

  @@map("users")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contractNumber String
  isDeleted Boolean @default(false)
 createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user User @relation(fields:[email],references: [email]) // one to one relation ships to Admin Table
 
  @@map("admins")
}

model Doctor {

  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contractNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlease String
  designation String
  isDeleted Boolean @default(false)
  averageRating Float @default(0)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user User @relation(fields:[email],references: [email])  // one to one relation ships to User Table
  doctorSpecialties DoctorSpecialties[] // many to many Relation Ship into DoctorSpecialties
  doctor  DoctorSchedules[] // one to many relation Ship to DoctorScheduleTable
  appointment Appointment[] // one to many relation ship into Appointment Table
  prescription Prescription[] // one to many reation ship into Prescription Table
  review  Review [] // one to many reation ship into review Table

  @@map("doctors")

}

model Patient {

 id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contractNumber String
  gender Gender
  address String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user User @relation(fields:[email],references: [email])  //  onet to one  relation ships user  table
  patientHealthData PatientHealthData?
  medicalRepor MedicalRepor[]
  appointment Appointment[]  // one to many relation ship into Appointment Table
  prescription Prescription[] // one to many relation ship into Prescription Table
  review Review[] // one to many realtion ship into review Table
  

}

model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialties[] // many to many Relation Ship into DoctorSpecialties

  @@map("specialties")
}

model DoctorSpecialties {

   specialitiesId String
   specialties Specialties @relation(fields: [specialitiesId],references: [id]) // many to many Relation Ship into Doctor Table
   doctorId  String
   doctor   Doctor @relation(fields: [doctorId], references: [id])  // many to many Relation Ship into Specialtie Table
   @@id([specialitiesId,doctorId])
    @@map("doctor_specialties")

}

model PatientHealthData {
 id                String              @id @default(uuid())
 patientId   String @unique
 patient Patient @relation(fields: [patientId],references: [id])
 dateOfBirth String
 gender Gender
 bloodGroup BloodGroup
 hasAllergies Boolean? @default(false)
hasDiabetes Boolean? @default(false)
height  String
weight  String
smokingStatus Boolean? @default(false)
dietaryPreferences String?
pregnancyStatus Boolean? @default(false)
mentalHealthHistory String?
immunizationStatus String?
hasPastSurgeries Boolean? @default(false)
recentAnxiety Boolean? @default(false)
recentDepression Boolean? @default(false)
maritalStatus MaritalStatus @default(UNMARRIED)
createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("patient_health_datas")

}

model MedicalRepor {
 id                String              @id @default(uuid())
 patientId String
 patient Patient @relation(fields: [patientId], references: [id])
 reportName String
 reportLink String
 createdAt DateTime @default(now())
 updatedAt  DateTime @updatedAt
@@map("medical_repor")

}

model Schedule {
 id                String              @id @default(uuid())
 startDateTime DateTime
 endDateTime DateTime
 createdAt DateTime @default(now())
 updatedAt  DateTime @updatedAt
 doctorSchedules DoctorSchedules[] // one to many realtion ship Doctor Schedule Table
 appointment Appointment? // one to one realtion ship into Appointment Table
 @@map("schedules")

}

model DoctorSchedules {

  doctorId String
  doctor Doctor @relation(fields: [doctorId],references: [id]) // one to many realtion ship doctor table
  scheduleId String
  schedule Schedule @relation(fields: [scheduleId],references: [id]) // one to many relation ship into Schedule Table
  isBooked Boolean @default(false)
  appointmentId String ?  @unique
  appointment Appointment? @relation(fields: [appointmentId],references: [id]) // one to many realtion ship into Appointment Table
  @@id([doctorId,scheduleId])
  @@map("doctor_schedules")
}

model Appointment {

  id                String              @id @default(uuid())
 patientId String
 patient  Patient @relation(fields: [patientId],references: [id]) // one to many relation ship into Patient Table
 
 doctorId String
 doctor Doctor @relation(fields: [doctorId],references: [id]) // one to many relation ship into Doctor Table
 
 scheduleId String @unique
 schedule Schedule @relation(fields: [scheduleId],references: [id]) // one to one realtion ship into Schedule Table

videoCallingId String
status AppointmentStatus @default(SCHEDULED)
paymentStatus PaymentStatus @default(UNPAID)
 doctorSchedules  DoctorSchedules? // one to many realtion ship into Doctor Schedule Table
 payment Payment? // one to one realtion into payment Table
 prescription Prescription? // one to one realtion into Prescription Table
 review Review? // one to one realtion into Review Table
createdAt DateTime @default(now())
 updatedAt  DateTime @updatedAt
 @@map("appointments")
}

model Payment {
id                String              @id @default(uuid())
appointmentId String @unique
appointment Appointment @relation(fields: [appointmentId],references: [id]) // one to one realtion into Appointment Table
amount Float
transactionId String @unique
status AppointmentStatus @default(COMPLETED)
paymentStatus  PaymentStatus @default(UNPAID)
paymentGatewayData Json?
createdAt DateTime @default(now())
updatedAt  DateTime @updatedAt
@@map("payments")
}

model Prescription {

id                String              @id @default(uuid())
appointmentId String @unique
appointment Appointment @relation(fields: [appointmentId],references: [id]) // one to one realtion with Appointment Table 
 
doctorId String
doctor Doctor @relation(fields: [doctorId],references: [id]) // one to many reation ship into Doctor Table

patientId String
patient Patient @relation(fields: [patientId],references: [id]) // one to many relation ship into Patient Table


instructions String
followUpDate DateTime?
createdAt DateTime @default(now())
updatedAt  DateTime @updatedAt
@@map("prescriptions ")
}

model Review {
id                String              @id @default(uuid())
patientId String
patient Patient @relation(fields: [patientId],references: [id]) // one to many realtion ship into Patient Table

doctorId String
doctor Doctor @relation(fields: [doctorId],references: [id])  // one to many reation ship into Doctorn Table

appointmentId String @unique
appointment Appointment @relation(fields: [appointmentId],references: [id]) // one to one realtion into Appointment Table

rating Float
comment String
createdAt DateTime @default(now())
updatedAt  DateTime @updatedAt
@@map("reviews")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT


}

enum  UserStatus {
  ACTIVE
  BLOCKED
  DELETED

}

enum Gender {
 MALE
 FEMALE
}

enum BloodGroup {

A_POSITIVE
B_POSITIVE
O_POSITIVE
AB_POSITIVE
A_NEGATIVE
B_NEGATIVE
O_NEGATIVE
AB_NEGATIVE
}
enum MaritalStatus {

  MARRIED
UNMARRIED
}
enum AppointmentStatus {

SCHEDULED
INPROGRESS
COMPLETED
CANCELED
}
enum PaymentStatus {
  PAID
UNPAID
}

