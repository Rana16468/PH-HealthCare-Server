// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(true)
  status  UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin Admin? // one to one relation ships to User Table
  doctor Doctor?  // one to one relation ships to Doctor Table
  patient Patient? // onet to one  relation ships to Patient table

  @@map("users")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contractNumber String
  isDeleted Boolean @default(false)
 createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user User @relation(fields:[email],references: [email]) // one to one relation ships to Admin Table
 
  @@map("admins")
}

model Doctor {

  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contractNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlease String
  designation String
  isDeleted Boolean @default(false)
  averageRating Float @default(0)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user User @relation(fields:[email],references: [email])  // one to one relation ships to User Table
  doctorSpecialties DoctorSpecialties[] // many to many Relation Ship into DoctorSpecialties

  @@map("doctors")

}

model Patient {

 id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contractNumber String
  gender Gender
  address String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user User @relation(fields:[email],references: [email])  //  onet to one  relation ships user  table
  

}

model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialties[] // many to many Relation Ship into DoctorSpecialties

  @@map("specialties")
}

model DoctorSpecialties {

   specialitiesId String
   specialties Specialties @relation(fields: [specialitiesId],references: [id]) // many to many Relation Ship into Doctor Table
   doctorId  String
   doctor   Doctor @relation(fields: [doctorId], references: [id])  // many to many Relation Ship into Specialtie Table
   @@id([specialitiesId,doctorId])
    @@map("doctor_specialties")

}


enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT


}

enum  UserStatus {
  ACTIVE
  BLOCKED
  DELETED

}

enum Gender {
 MALE
 FEMALE
}
